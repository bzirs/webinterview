import{ab as e,E as a,F as o,ac as d}from"./framework-c74165a4.js";const i={},t=d('<h1 id="vue常用修饰符" tabindex="-1"><a class="header-anchor" href="#vue常用修饰符" aria-hidden="true">#</a> vue常用修饰符</h1><h2 id="v-on" tabindex="-1"><a class="header-anchor" href="#v-on" aria-hidden="true">#</a> v-on</h2><ul><li><code>.stop</code>: 调用event.stopPropagation(),阻止默认冒泡行为</li><li><code>.prevent</code>: 调用event.preventDefault(),阻止表单默认提交行为</li><li><code>.native</code>: 监听组件元素的原生事件</li></ul><h2 id="v-bind" tabindex="-1"><a class="header-anchor" href="#v-bind" aria-hidden="true">#</a> v-bind</h2><ul><li><code>.prop</code>: 作为一个DOM property绑定而不是作为attribute绑定。</li><li><code>.camel</code>: (2.1.0+)将kebab-case attribute名转换为camelCase。2.1.0开始支持</li><li><code>.sync</code>: (2.3.0+)语法糖，会扩展成一个更新父组件绑定值的v-on侦听器</li></ul><h2 id="v-model" tabindex="-1"><a class="header-anchor" href="#v-model" aria-hidden="true">#</a> v-model</h2><ul><li><code>.lazy</code>: 取代<strong>input</strong>监听<strong>change</strong>事件</li><li><code>.number</code>: 输入字符串转为有效的数字</li><li><code>.trim</code>: 输入首尾空格过滤</li></ul>',7),c=[t];function n(r,l){return a(),o("div",null,c)}const h=e(i,[["render",n],["__file","vue常用修饰符.html.vue"]]);export{h as default};

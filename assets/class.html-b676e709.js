const e=JSON.parse('{"key":"v-0fb36710","path":"/docs/typescript/class.html","title":"面试官：说说你对 TypeScript 中类的理解？应用场景？","lang":"zh-CN","frontmatter":{"description":"一、是什么 类（Class）是面向对象程序设计（OOP，Object-Oriented Programming）实现信息封装的基础 类是一种用户定义的引用数据类型，也称类类型 传统的面向对象语言基本都是基于类的，JavaScript 基于原型的方式让开发者多了很多理解成本 在 ES6 之后，JavaScript 拥有了 class 关键字，虽然本质依然...","head":[["meta",{"property":"og:url","content":"https://bzirs.github.io/webinterview/webinterview/docs/typescript/class.html"}],["meta",{"property":"og:title","content":"面试官：说说你对 TypeScript 中类的理解？应用场景？"}],["meta",{"property":"og:description","content":"一、是什么 类（Class）是面向对象程序设计（OOP，Object-Oriented Programming）实现信息封装的基础 类是一种用户定义的引用数据类型，也称类类型 传统的面向对象语言基本都是基于类的，JavaScript 基于原型的方式让开发者多了很多理解成本 在 ES6 之后，JavaScript 拥有了 class 关键字，虽然本质依然..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-30T09:18:59.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-12-30T09:18:59.000Z"}]]},"headers":[{"level":2,"title":"一、是什么","slug":"一、是什么","link":"#一、是什么","children":[]},{"level":2,"title":"二、使用方式","slug":"二、使用方式","link":"#二、使用方式","children":[{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"修饰符","slug":"修饰符","link":"#修饰符","children":[]},{"level":3,"title":"私有修饰符","slug":"私有修饰符","link":"#私有修饰符","children":[]},{"level":3,"title":"受保护修饰符","slug":"受保护修饰符","link":"#受保护修饰符","children":[]},{"level":3,"title":"静态属性","slug":"静态属性","link":"#静态属性","children":[]},{"level":3,"title":"抽象类","slug":"抽象类","link":"#抽象类","children":[]}]},{"level":2,"title":"三、应用场景","slug":"三、应用场景","link":"#三、应用场景","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"createdTime":1672391939000,"updatedTime":1672391939000,"contributors":[{"name":"bzirs","email":"bzirs@outlook.com","commits":1}]},"readingTime":{"minutes":4.51,"words":1354},"filePathRelative":"docs/typescript/class.md","localizedDate":"2022年12月30日","autoDesc":true}');export{e as data};

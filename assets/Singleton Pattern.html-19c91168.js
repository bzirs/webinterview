const e=JSON.parse('{"key":"v-653e9a97","path":"/docs/design/Singleton%20Pattern.html","title":"面试官：说说你对单例模式的理解？如何实现？","lang":"zh-CN","frontmatter":{"description":"## 一、是什么 单例模式（Singleton Pattern）：创建型模式，提供了一种创建对象的最佳方式，这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建 在应用程序运行期间，单例模式只会在全局作用域下创建一次实例对象，让所有需要调用的地方都共享这一单例对象，如下图所示： 从定义上来看，全局变量好像就是单例模式，但是一般...","head":[["meta",{"property":"og:url","content":"https://bzirs.github.io/webinterview/webinterview/docs/design/Singleton%20Pattern.html"}],["meta",{"property":"og:title","content":"面试官：说说你对单例模式的理解？如何实现？"}],["meta",{"property":"og:description","content":"## 一、是什么 单例模式（Singleton Pattern）：创建型模式，提供了一种创建对象的最佳方式，这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建 在应用程序运行期间，单例模式只会在全局作用域下创建一次实例对象，让所有需要调用的地方都共享这一单例对象，如下图所示： 从定义上来看，全局变量好像就是单例模式，但是一般..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-30T09:18:59.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-12-30T09:18:59.000Z"}]]},"headers":[{"level":2,"title":"一、是什么","slug":"一、是什么","link":"#一、是什么","children":[]},{"level":2,"title":"二、实现","slug":"二、实现","link":"#二、实现","children":[]},{"level":2,"title":"三、使用场景","slug":"三、使用场景","link":"#三、使用场景","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"createdTime":1672391939000,"updatedTime":1672391939000,"contributors":[{"name":"bzirs","email":"bzirs@outlook.com","commits":1}]},"readingTime":{"minutes":2.66,"words":797},"filePathRelative":"docs/design/Singleton Pattern.md","localizedDate":"2022年12月30日","autoDesc":true}');export{e as data};

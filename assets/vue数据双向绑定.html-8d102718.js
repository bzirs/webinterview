import{ab as r,E as n,F as a,C as e,Q as t,L as c,ac as d,U as s}from"./framework-c74165a4.js";const l={},_=d('<h1 id="_04-vue2-数据双向绑定原理" tabindex="-1"><a class="header-anchor" href="#_04-vue2-数据双向绑定原理" aria-hidden="true">#</a> 04. Vue2 数据双向绑定原理</h1><h2 id="逐字稿" tabindex="-1"><a class="header-anchor" href="#逐字稿" aria-hidden="true">#</a> 逐字稿</h2><p>Vue2 数据双向绑定原理是通过<code>数据劫持</code> + <code>发布者-订阅者模式</code>的方式来实现的, 先通过<code>ES5</code>提供的<code>Object.defineProperty()</code>方法劫持(监听)对象的各个属性, 同时让属性具有了对应的<code>getter</code>和<code>setter</code>方法, 并在当监听的属性发生变动时通知<code>订阅者</code>, 是否需要更新.</p><p>数据劫持是指利用<code>Object.defineProperty()</code>方法劫持对象的访问器, 在属性值发生变化时我们可以获取变化, 进行下一步操作</p><p><code>发布者-订阅者</code>模式是指利用软件架构中<strong>发布订阅</strong>的消息范式, 使得<strong>发布者和订阅者是互不知道对方的存在, 发布者只需要把消息发送到订阅器里面, 订阅着只需要接收自己需要订阅的内容</strong></p><ul><li>个人认为不需要背诵以下片段(作为补充了解) <blockquote><p>在软件架构，发布-订阅是一种消息范式，消息的发送者（称为发布者）不会将消息直接发送给特定的接收者（称为订阅者）。而是将发布的消息分为不同的类别，无需了解哪些订阅者（如果有的话）可能存在。同样的，订阅者可以表达对一个或多个类别的兴趣，只接收感兴趣的消息，无需了解哪些发布者（如果有的话）存在</p></blockquote></li></ul>',6),i={href:"https://www.yuque.com/silence1224/zvw0fi/kcado0#1b503b33",target:"_blank",rel:"noopener noreferrer"},p={href:"https://juejin.cn/post/7129795830764011527",target:"_blank",rel:"noopener noreferrer"},h=e("p",null,"(@赵泓鉴)",-1);function u(f,b){const o=s("ExternalLinkIcon");return n(),a("div",null,[_,e("p",null,[e("a",i,[t("原面试题"),c(o)])]),e("p",null,[e("a",p,[t("相关文章"),c(o)])]),h])}const m=r(l,[["render",u],["__file","vue数据双向绑定.html.vue"]]);export{m as default};

import{ab as e,E as r,F as t,ac as o}from"./framework-c74165a4.js";const a={},n=o('<h1 id="_01-阐述一下什么是事件循环-消息循环" tabindex="-1"><a class="header-anchor" href="#_01-阐述一下什么是事件循环-消息循环" aria-hidden="true">#</a> 01. 阐述一下什么是事件循环(消息循环)</h1><h2 id="逐字稿" tabindex="-1"><a class="header-anchor" href="#逐字稿" aria-hidden="true">#</a> 逐字稿</h2><p>事件循环又叫做消息循环, 是浏览器<strong>渲染主线程</strong>的工作方式</p><p>在 Chrome 的源码中, 它开启一个不会结束的 for 循环, 每次循环从<strong>消息队列</strong>(事件队列)中取出第一个任务执行, 而其他<code>线程</code>只需要在合适的时候将任务加入到队列<code>末尾</code></p><p>过去把消息队列简单分为<strong>宏队列</strong>和<strong>微队列</strong>, 目前已无法满足复杂的浏览器环境, 取而代之的是一种更加灵活多变的处理方式.</p><p>根据 W3C 官方的解释, 每个任务有不同的类型, 同类型的任务必须在同一个队列, 不同的任务可以属于不同的队列. 不同任务队列有不同的优先级, 在一次事件循环中, 由浏览器自行决定取哪一个队列的任务. 但浏览器<strong>必须</strong>有一个微队列, 微队列的任务一定具有最高的优先级, 必须优先调度执行.</p><p>(@赵泓鉴)</p>',7),s=[n];function c(_,d){return r(),t("div",null,s)}const i=e(a,[["render",c],["__file","什么是事件循环.html.vue"]]);export{i as default};

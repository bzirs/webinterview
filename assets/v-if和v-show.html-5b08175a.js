import{ab as e,E as o,F as d,ac as c}from"./framework-c74165a4.js";const i={},l=c('<h1 id="_05-v-if-和-v-show-之间的区别" tabindex="-1"><a class="header-anchor" href="#_05-v-if-和-v-show-之间的区别" aria-hidden="true">#</a> 05. v-if 和 v-show 之间的区别</h1><h2 id="逐字稿" tabindex="-1"><a class="header-anchor" href="#逐字稿" aria-hidden="true">#</a> 逐字稿</h2><ol><li><p>底层原理不同</p><ul><li><code>v-if</code>是根据条件动态的添加<code>dom</code>节点。而<code>v-show</code>是根据条件切换<code>dom</code>元素的<code>css</code>的<code>display</code>样式。</li></ul></li><li><p>特性不同</p><ul><li><code>v-if</code>根据条件切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件。（简单说，v-if 是有惰性的，条件为 false 时，不会渲染 dom 元素）所以，v-if 的初始渲染成本低，但频繁切换时，会不断地添加或删除 dom 元素节点，所以它的切换成本很高。 单 v-show 无论条件如何都会创建 dom，所以它的初始成本高，但切换成本低。</li></ul></li><li><p>当表达式内 boolean 值发生变化时，是否会触发生命周期</p><ul><li><code>v-show</code>内的表达式的布尔值发生改变时，不会触发<code>vue</code>组件的生命周期。因为<code>v-show</code>只是切换 dom 元素的 css 样式,没改变数据，它已经完成了初始化和挂载阶段内的四个钩子。</li><li><code>v-if</code>表达式内由<code>false</code>变为<code>true</code>的时候，触发组件的<code>beforeCreate</code>、<code>create</code>、<code>beforeMount</code>、<code>mounted</code>钩子，由<code>true</code>变为<code>false</code>的时候触发组件的<code>beforeDestory</code>、<code>destoryed</code>钩子.</li></ul></li></ol><p>(@王功道)</p>',4),a=[l];function s(t,r){return o(),d("div",null,a)}const f=e(i,[["render",s],["__file","v-if和v-show.html.vue"]]);export{f as default};
